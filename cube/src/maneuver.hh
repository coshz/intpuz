#pragma once
#include <vector>
#include <array>
#include <tuple>
#include <string>
#include "def.h"

/* 
  Convert move string to sequence of TurnAxis.
  A valid move string is a sequence of terms seperated by optional spaces, where
    - a term is one of: Y, (Y), (Y){n}; (Y: an atom, n: an integer);
    - an atom is one of: X, X2, X3, X'; (X: one of U,D,L,R,F,B);

  Note: nested brackets are prohibited.
    
  Example: ("=>" means "is interpreted as"):
    - `U F2 D F'` => `UFFDFFF`
    - `(U'R2){2} F'D` => `UUURRUUURRFFFD`
 */
std::vector<TurnAxis> operator""_T(const char* ts, size_t n);

/** 
 * @brief A auxiary class to provide the properties of the TurnAxis sequence
 * @details This class has minimal dependencies (only "def.h"), although other 
 * units (eg. cube.cpp) seems helpful.
 */
struct Maneuver
{
    using facecube_t = std::array<Face,54>;
    using cubiecube_t = std::tuple<
        std::array<Corner,8>, std::array<unsigned,8>, 
        std::array<Edge,12>, std::array<unsigned,12>>;

    Maneuver(const std::vector<TurnAxis> &m)
    :ms{m},fc_cached_(false),cc_cached_(false){}

    Maneuver(const std::string &s)
    :Maneuver(operator""_T(s.c_str(),s.length())){}

    /* the facecube generated by maneuver acting on the identity cube */
    auto get_facecube() const -> facecube_t&;

    /* the cubiecube generated by maneuver acting on the identity cube */
    auto get_cubiecube() const -> cubiecube_t&;

    /* the color configuration of facecubie */
    auto fc_color() -> std::string;

    /* the permutation of cubiecube */
    auto cc_permutation() -> std::string;

    std::vector<TurnAxis> ms;   

    mutable bool fc_cached_;
    mutable bool cc_cached_;
    
    mutable facecube_t fc;
    mutable cubiecube_t cc;
};
